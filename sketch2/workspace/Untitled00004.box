{
  "code" "var ToAxi = Java.type(\"trace.ToAxi\")\nvar PythonHead = Java.type(\"trace.video.PythonHead\")\n// **change this according to your OS and according to where you put pythonhead**\n// PythonHead.start(_, \"/Users/alec/CMSC/madd25604/sketch2/venv/bin/python3\", \"/Users/alec/CMSC/madd25604/sketch2/pythonhead\", [\"--do_lines\", \"--shrink\", \"0.2\", \"--video\", \"1\", \"--do_flow\"])\n\nPythonHead.start(_, \"/Users/alec/CMSC/madd25604/sketch2/venv/bin/python3\", \"/Users/alec/CMSC/madd25604/sketch2/pythonhead\", \n[\"--shrink\", \"0.5\",\n \"--video\", \"1\",\n \"--do_pose\",\n \"--do_background\",\n \"--compute_contours\",\n\"--do_lines\",\n \"--do_flow\",\n])\nvar frame_count = 0\n\nvar afx = 0\nvar afy = 0\n\n_r = () => {\n\t_.lines.clear()\n\tvar posepoints = PythonHead.now.posepoints\n// \tPythonHead.now.posepoints\n\n\tvar f1 = new FLine()\n\tvar p = PythonHead.now.posepoints\n\n\tvar x_off = 0.01\n\tvar y_off = -0.3\n\tfor (var i = 0; i < p.length; i+=2)\n\t{\n\t\tf1.moveTo(p[i][0]+x_off, p[i][1]+y_off)\n\t\tf1.lineTo(p[i+1][0]+x_off, p[i+1][1]+y_off)\n\t}\n\n\tf1.pointed = true\n\tf1.pointSize=5\n\t_.lines.f1 = f1 * 1000\n//BACKGROUNDS\n\n\tvar t = PythonHead.now.contours\n\tif (t)\n\t{\n\n\t\tfor(var i=0;i<t.length;i++)\n\t\t{\n\t\t\tvar f = new FLine()\n\t\t\tvar track = t[i]\n\n\t\t\tif (track.length<40) continue\n\n\t\t\tf.moveTo(track[0][0]*960, track[0][1]*540)\n\t\t\tfor(var j=1;j<track.length;j+=1)\n\t\t\t{\n\t\t\t\tf.lineTo(track[j][0]*960, track[j][1]*540)\n\t\t\t}\n\n\t\t\tf = f * scale(1.2).pivot(f.center())\n\t\t\tf.color = vec(0,0,0,0.3)\n\t\t\tf.strokeColor = vec(0,0,0,1)\n\t\t\tf.filled=false\n\t\t\t_.lines.add(f)\n\t\t\tf = f * rotate(10.2).pivot(f.center())\n\t\t\tf.color = vec(0,0,0,0.3)\n\t\t\tf.strokeColor = vec(0,0,0,1)\n\t\t\tf.filled=false\n\t\t\t_.lines.add(f)\n\t\t}\n\n}\n\t\n//IDK MORE LINES??\n// make a new line\n\tvar f3 = new FLine()\n\t// grab the 'lines' for the current moment\n\tvar l = PythonHead.now.lines\n\t// if there are any lines, then draw all of them\n\tif (l)\n\t{\n\t\t// grab the flow amount\n\t\tvar fx = PythonHead.now.mean_motion_x*200\n\t\tvar fy = PythonHead.now.mean_motion_y*-200\n\n\t\t// and smooth out the noise in it\n\t\tafx = fx*0.1 + 0.9*afx\n\t\tafy = fy*0.1 + 0.9*afy\n\n\t\tfor(var i=0;i<l.length;i++)\n\t\t{\n\t\t\t// list of list of lists!\n\t\t\t// the first point\n\t\t\ta = vec(l[i][0][0], l[i][0][1])\n\t\t\t// the second point\n\t\t\tb = vec(l[i][1][0], l[i][1][1])\n\n\t\t\tlen = (a-b).length()\n\t\t\t// scale them up so we can see them\n\t\t\ta = a * vec(960, 540)\n\t\t\tb = b * vec(960, 540)\n\n\t\t\t// random flow-based jitter\n\t\t\ta.x += afx*100*Math.random()\n\t\t\tb.x += afx*100*Math.random()\n\n\t\t\ta.y += afy*100*Math.random()\n\t\t\tb.y += afy*100*Math.random()\n\n\t\t\tperp = a-b\n\t\t\tperp = vec(perp.y, -perp.x).normalize()*1\n\n\n\t\t\tf3.moveTo((a-b)*2+a)\n\t\t\tf3.last().color=vec(0,0,0,1)\n\t\t\tf3.lineTo((b-a)*2+b)\n\t\t\tf3.last().color=vec(0,0,0,1)\n\n\t\t\t// render as weird triangle things\n\t\t\tfor(var n=0;n<30;n++)\n\t\t\t{\n\t\t\t\ta = (a-b)*(1+len*n*0.003) + b \n\t\t\t\ta.noise(3)\n\t\t\t\tb.noise(0.5)\n\t\t\t\ta = a + perp\n\t\t\t\tf3.moveTo(a)\n\t\t\t\tf3.last().color=vec(0,0,0,0.1)\n\t\t\t\t//f3.last().color=vec(len*3,len*3,len*3,0.1)\n\t\t\t\tf3.lineTo(b)\n\t\t\t\tf3.last().color=vec(0,0,0,0.3)\n\t\t\t}\n\t\t}\n\n\t}\n\t_.lines.f3 = f3\n\n}\n\n"
  "withOverloading" true
  "boxOutline" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3IAAAAAAAAAAAAAAAAAAAAAA/0zMzMzMzMz/QAAAAAAAAeA=="
  }
  "__boxclass__" "fieldbox.boxes.Box"
  "__id__" "_6b047d9e_89a7_486f_8ea8_03506422afa8"
  "__datafilename__" "{{workspace}}/Untitled00004.box"
  "boxBackground" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3ID/wAAAAAAAAP+5mZmZmZmY/7MzMzMzMzT/oAAAAAAAAeA=="
  }
  "name" "pythonhead"
  "__filename__code" "{{workspace}}/Untitled00004.box.js"
  "frame" #field/rect{
    :x -149.11172485351562
    :y 103.23281860351562
    :w 100.0
    :h 100.0
  }
}