{
  "boxOutline" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3IAAAAAAAAAAAAAAAAAAAAAA/0zMzMzMzMz/QAAAAAAAAeA=="
  }
  "fragment" "#version 410\n\nlayout(location=0) out vec4 _output;\n\nuniform sampler2D inputTexture;\nuniform vec2 clock_time;\nin vec2 tc;\n\nfloat circle(vec2 _st, float _radius){\n\tvec2 len = _st-vec2(0.5);\n\treturn 1.5-smoothstep(_radius-(_radius*0.01),\n\t\t\t\t\t\t_radius+(_radius*0.01),\n\t\t\t\t\t\tdot(len, len)*4.0);\n}\n\nvec2 tile(vec2 st, float scale){\n\treturn fract(st * scale);\n}\n\nvec2 brickTile(vec2 _st, float _zoom, float _time){\n\t_st *= _zoom;\n\t\n\tfloat t_fact = step(0.,mod(_time/100, 2.0));\n\t\n\t_st.y += step(1., mod(_st.x,2.0)) * 0.5 * (cos(_time * 0.25));\n\t_st.x += step(1., mod(_st.y,2.0)) * 0.5 * sin(_time * 0.25);\n\t\n\t\n\treturn fract(_st);\n}\n\nvoid main()\n{\n\tfloat time = clock_time.x;\n\t\t\n\tvec2 t_flip = vec2(tc.x, 1-tc.y);\n\tvec4 c = texture(inputTexture, t_flip);\n\tc = vec4(\n\t\tc.r*cos(texture(inputTexture, vec2(1- t_flip.x, t_flip.y)).b),\n\t\tc.g * sin(time / 10), \n\t\tc.b * sin(c.g * 100),\n\t\t1.0\n\t);\n\t\n\tvec2 st = brickTile(t_flip,\n\t\t\t\t\t\t//(cos(time / 20) * 10) + 30,\n\t\t\t\t\t\t40,\n\t\t\t\t\t   \ttime);\n\t\n\tvec3 color = vec3(circle(st, 0.6)) * c.rgb;\n\t_output = vec4(color, 1.0);\n\n}"
  "geometry" ""
  "name" "webcam"
  "frame" #field/rect{
    :x 199.828125
    :y 265.4921875
    :w 100.0
    :h 100.0
  }
  "__filename__code" "{{workspace}}/webcam00000.box.js"
  "code" "_.textureOperator = true\n_.textureOperator_noInputs = true\n\nvar MeshBuilder = Java.type('field.graphics.MeshBuilder')\nvar BaseMesh = Java.type('field.graphics.BaseMesh')\n\nvar FBO = Java.type('field.graphics.FBO')\nvar FBOSpecification = Java.type('field.graphics.FBO.FBOSpecification')\n\n\n_.fbo = new FBO(FBOSpecification.singleFloat16(_.t_constants.nextUnit(), _.t_constants.width, _.t_constants.height))\n\n_.shader = _.newShader()\n_.mesh = BaseMesh.triangleList(0,0)\n_.builder = _.mesh.builder()\n\n_.shader.mesh = _.mesh\n\n_.builder.open()\n_.builder.v(0,0,0)\n_.builder.v(1,0,0)\n_.builder.v(1,1,0)\n_.builder.v(0,1,0)\n_.builder.e(0,1,2) \n_.builder.e(0,2,3) \n_.builder.close()\n\n_.fbo.scene.shader = _.shader\n\n__.doSpaceMenu(_)\n\nvar WebcamDriver = Java.type(\"trace.input.WebcamDriver3\")\n\nvar d = new WebcamDriver(0, 0)\n_.shader.inputTexture = WebcamDriver.texture\n_.shader.clock_time = vec(0,0)\n\n\n_.auto = 10"
  "vertex" "#version 410\nlayout(location=0) in vec3 position;\n\nout vec2 tc;\n\nvoid main()\n{\n\t//gl_Position = ( vec4(position*2 - vec3(1,1,0), 1.0));\n\tgl_Position = vec4(position*2 - vec3(1,1,0), 1.0);\n\n\ttc = position.xy;\n}"
  "auto" 10
  "withOverloading" true
  "preamble" ""
  "__filename__vertex" "{{workspace}}/webcam00000.box.glslv"
  "__boxclass__" "fieldbox.boxes.Box"
  "__id__" "_83609cda_2f7b_48c9_9996_375cb0db7d1a"
  "__datafilename__" "{{workspace}}/webcam00000.box"
  "boxBackground" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3ID/wAAAAAAAAP+5mZmZmZmY/7MzMzMzMzT/oAAAAAAAAeA=="
  }
  "__filename__geometry" "{{workspace}}/webcam00000.box.glslg"
  "__filename__fragment" "{{workspace}}/webcam00000.box.glslf"
}