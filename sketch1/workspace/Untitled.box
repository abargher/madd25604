{
  "code" "var FieldLinesAndJavaText = Java.type(\"field.graphics.FLinesAndJavaText\")\n\nvar toText = new FieldLinesAndJavaText()\nvar code = __.children.text_draw.code\n\n_.lines.clear()\nvar code_lines = code.split(/\\r?\\n/)\nvar num_lines = code_lines.length\n\nfunction weird_trig(q, i) {\n\treturn Math.tan(Math.pow(q, 2) + Math.sin(q) + Math.log(q)) * i * 0.02\n}\n\n// Font parameters\nvar spacing = 40\nvar font_size = 36\nvar font_name = \"Wingdings\"\n\n// Color parameters\nvar opacity = 0.2\nvar base_color = vec(0.1,0.02,0.15,opacity)\nvar red_adj = 0.02\nvar green_adj = 0.008\nvar blue_adj = 0.01\n\n// Weird parameters\nvar fuzz = 4\nvar q_limit = 25.0\nvar point_size = 2\nvar chaos_scale = 0.05\nvar noise_scale = 4\nvar noise_limiter = 200\n\nfunction weird_trig(q, i) {\n\treturn (1 / Math.cos(Math.pow(q, 2) + \n\t\t\t\t\tMath.sin(q) + \n\t\t\t\t\tMath.tan(q_limit - q) * chaos_scale + \n\t\t\t\t\tMath.log(q))) * \n\t\t\ti * \n\t\t\tchaos_scale\n}\n\nfunction variable_noise(i, lp) {\n\treturn (i +\n\t\t\tlp +\n\t\t\tMath.sin(i / (num_lines / 2)) +\n\t\t   \tMath.log(lp) * noise_scale) / noise_limiter\n}\n\nvar q_func = weird_trig\n\n// Worker function, draws a single line and its sublines, where one\n// \"line\" is a line comprising a character of text\nfunction draw_point_fuzz(m, i, line, f){\n\tm = new FLine().data(\"ml*\", m.sampleByDistance(0.1))\n\tvar c = m.cursor()\n\tvar p = []\n\t\n\tfor(var q = 0; q < q_limit; q++)\n\t{\n\t\tvar alpha = (_t().doubleValue() * num_lines % 1)*q/q_limit\n\t\tvar offset = vec(0, (i+1) * spacing)\n\t\t\n\t\tc.setD(c.lengthD()*alpha)\n\t\t\n\t\t// move to location\n\t\tp.push(c.position() + \n\t\t\t   c.normal2().normalize()*q_func(q, i)*fuzz +\n\t\t\t   offset)\n\t\t\n\t\t// draw line to location\n\t\tp.push(c.position() +\n\t\t\t   c.tangent().normalize()*fuzz +\n\t\t\t   offset)\n\t}\n\n\tfor (var item of p) {\n\t\titem.noise(variable_noise(i, p.length))\n\t}\n\t\n\tvar fline = new FLine().data(\"ml*\", p)\n\tvar color = (base_color + (i * vec(red_adj, green_adj, blue_adj, 0)))\n\t\n\tfline.pointed = true\n\tfline.pointSize = point_size\n\tfline.color = color\n\t_.lines.add(fline)\n}\n\n_r = () => {\n\tvar i = Math.floor(_t().doubleValue() * code_lines.length)\n\n\tvar line = code_lines[i];\n\tvar f = toText.flineForText(line, font_name, font_size, 0)\n\n\tfor(var m of f.pieces()) {\n\t\tdraw_point_fuzz(m, i, line, f);\n\t}\n\t_.redraw()\n}"
  "withOverloading" true
  "boxOutline" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3IAAAAAAAAAAAAAAAAAAAAAA/0zMzMzMzMz/QAAAAAAAAeA=="
  }
  "__boxclass__" "fieldbox.boxes.Box"
  "__id__" "_14191481_5d49_4c98_8a1a_e02f1de259df"
  "__datafilename__" "{{workspace}}/Untitled.box"
  "boxBackground" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3ID/wAAAAAAAAP+5mZmZmZmY/7MzMzMzMzT/oAAAAAAAAeA=="
  }
  "name" "text_draw"
  "__filename__code" "{{workspace}}/Untitled.box.js"
  "frame" #field/rect{
    :x 3.7008559703826904
    :y -105.88401794433594
    :w 589.8203125
    :h 100.0
  }
}